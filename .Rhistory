gds
seed
devtools::check()
file
gdsfmt:::.reopen
gf
gdsfile(gf)
gf$sample.id
gf$position
gf$annotation
gf$annotation$id
gf$annotation$qual
gf$annotation$info
gf$annotation$info$AA
gdsnodes(gf)
gdsfile(gf)
?closefn.gds
devtools::load_all()
acquireGDScon
devtools::load_all()
gdsExampleFileName()
fn
gdsfile()
devtools::load_all()
f
node
node
node
a
a
ns
all.gdsn
all.gdsn
devtools::load_all()
devtools::load_all()
f
devtools::load_all()
debug(acquireGDS)
output
undebug(acquireGDS)
devtools::load_all()
debug(acquireGDS)
i
path
i
persistent$handles
names(persistent$handles)
closefn.gds()
ls()
gds
q()
n
devtools::load_all()
acquireGDS
fn
debug(acquireGDS)
nhandles
persistent$handles
names(persistent$handles)
fn
identical(names(persistent$handles), fn)
i
i
undebug(acquireGDS)
gf
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
rlang::last_trace()
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
q()n
q()
n
devtools::document()
setwd("..")
getwd()
devtools::document()
devtools::document()
devtools::run_examples()
fn <- gdsExampleFileName()
traceback()
devtools::load_all()
fn <- gdsExampleFileName()
fn
fn <- gdsExampleFileName()
releaseGDS(fn)
releaseGDS(/home/qian/R/x86_64-pc-linux-gnu-library/4.2/SeqArray/extdata/CEU_Exon.gds)
releaseGDS("/home/qian/R/x86_64-pc-linux-gnu-library/4.2/SeqArray/extdata/CEU_Exon.gds")
fn <- gdsExampleFileName()
debug(gdsExampleFileName)
gdsExampleFileName()
gdsExampleFileName()
fn
debug(acquireGDS)
i
nhandles
q()n
q()
n
devtools::check()
?openfn.gds
closefn.gds
devtools::document()
devtools::document()
devtools::check()
traceback()
debug(gdsExampleFileName)
fn
gds
fmt
get.sttr.gdsn(gds$root)
get.attr.gdsn(gds$root)
get.attr.gdsn(gds$root)$FileFormat
devtools::load_all()
debug(acquireGDS)
i
openfn.gds(path)
Q
search()
ls(13)
showfile.gds()
showfile.gds(, closeall=T)
showfile.gds
i
fn
i
devtools::check()
debug(releaseGDS)
fn
path
i
persistent$handles
showfile.gds()
showfile.gds(T)
devtools::check()
showfile.gds(T)
showfile.gds()
showfile.gds()
devtools::install()
Q()
q()
n
file
debug(GDSArray)
Q
devtools::load_all()
q()n
q()
n
devtools::install()
devtools::install()
library(GDSArray)
gf
gf
file
debug(GDSFile)
gf
Q
devtools::load_all()
gf
devtools::load_all()
devtools::load_all()
gf
gf
showfile.gds()
showfile.gds(T)
showfile.gds()
devtools::check()
devtools::check()
?trycatch
?tryCatch
fn
fn <- gdsExampleFileName()
fn
showfile.gds()
closefn.gds()
showfile.gds(sear)
search()
ls(13)
ls()
gf
gt
seed
varname
dp
e
file
rm(e)
cache.gdsn
cleanup.gds
cleanup.gds
?cleanup.gds
?cache.gdsn
path
fn
ls()
file
oo <- tryCatch(openfn.gds(file))
oo
is(oo)
oo <- tryCatch(openfn.gds(file), error = function(e) e)
oo
is(00)
is(oo)
is.error(oo)
is(oo)
is(oo, "Error")
is(oo, "simpleError")
showfile.gds()
devtools::load_all()
file
acquireGDS(file)
ff <- openfn.gds(file)
acquireGDS(file)
debug(acquireGDS)
acquireGDS(file)
persistent$handles
releaseGDS(file)
showfile.gds()
i
output
acquireGDS(fn)
i
c
undebug(acquireGDS)
seed
devtools::load_all()
devtools::check()
devtools::document()
devtools::check()
devtools::test()
file
rm(file)
ls()
rm(list=ls())
fn
file
debug(gdsExampleFileName)
fn
gs
gds
debug(acquireGDS)
i
gds
is(gds)
showfile.gds()
i
persistent$handles
Q
showfile.gds()
q()n
q()
n
devtools::load_all()
persistent$handles
devtools::check()
devtools::test()
devtools::test()
devtools::load_all()
devtools::test()
q()
n
setwd("VariantExperiment-fix/")
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::load_all()
showfile.gds()
debug(makeVariantExperimentFromGDS)
.get_gds_fileFormat
openfn.gds
devtools::load_all()
q()
n
devtools::load_all()
devtools::check()
devtools::document()
devtools::document()
BiocManager::install("roxygen2")
n
devtools::document()
devtools::document()
devtools::check()
seqOpen
SeqArray::seqOPen
SeqArray::seqOpen
?SeqArray::seqOpen
?SNPRelate::snpgdsOpen
tryCatch
?tryCatch
?expression
expression(stop(e))
eval(expression(stop(e)))
eval(expression(print("aa")))
tolower
tolower(NULL)
SNPRelate::snpgdsOpen
SNPRelate::snpgdsOpen
SeqArray::seqOpen
ls()
setwd("..")
getwd()
setwd("GDSArray")
dir()
devtools::document()
devtools::check()
debug(acquireGDS)
path
type
type
ex <- expression(openfn.gds(path, ...))
ex
ex <- switch(type)
type
expression(SeqArray::seqOpen(path, ...))
eval(expression(SeqArray::seqOpen(path, ...)))
ex <- switch(type, NULL = expression(print("NULL")), "seqgds" = expression(print("seqgds")), "snpgds" = expression(print("snpgds")))
eval(expression(SNPRelate::snpgdsOpen(path, ...)))
showfile.gds(T)
eval(expression(SNPRelate::snpgdsOpen(path, ...)))
expression(SNPRelate::snpgdsOpen(path, ...))
eval(expression(SNPRelate::snpgdsOpen(path, ...)))
is(ex)
Q
devtools::load_all()
devtools::document()
devtools::check()
devtools::install()
setwd("VariantExperiment-fix/")
devtools::check()
devtools::load_all()
devtools::check()
debug(makeVariantExperimentFromSEQGDS)
colData
debug(.rowRanges_seqgds)
debug(.granges_seqgds)
ff <- acquireGDS(seqgdsfile, type="seqgds")
ff
SeqArray::granges(ff)
is(ff)
debug(acquireGDS)
ff <- acquireGDS(seqgdsfile, type="seqgds")
Q
undebug(acquireGDS)
gdscon
is(gdscon)
release(fn)
releaseGDS(fn)
c1 <- SeqArray::seqOpen(fn)
is(c1)
is(c1, "gds.class")
is(c1, "SeqVarGDSClass")
stopifnot
SeqArray::seqClose
SNPRelate::snpgdsClose
devtools::load_all()
debug(acquireGDS)
c
c
gdscon
acquireGDS(fn)
c
acquireGDS(fn, type = "snpgds")
i
output
acquireGDS(fn, "seqgds")
Q
devtools::load_all()
acquireGDS
devtools::load_all()
acquireGDS
devtools::load_all()
acquireGDS
q()n
q()
n
